---
interface Props {
	events: {
		year: string;
		description: string;
	}[];
}

const { events } = Astro.props;
---
<style>
	.section {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.description {
		position: sticky;
		top: 0;
		width: 100%;
		display: flex;
		flex-direction: column;
		justify-content: center;
		background-color: white;
		padding: 1rem;
	}

	.description > .event + .event {
		margin-top: 3rem;
	}

	.event {
		display: flex;
		flex-direction: column;
		align-items: center;
		row-gap: 1rem;
		padding-top: 2rem;
	}

	.year {
		color: var(--stabila-brand-color);
		border-right: 3px solid var(--stabila-brand-color);
		width: 4ch;
		white-space: nowrap;
		overflow: hidden;
		font-size: 3rem;
		font-weight: 800;
	}
</style>

<handle-appear>
	<section class="section">
		<div class="description">
			{events.map(event => (
				<div class="event">
						<div class="year">{event.year}</div>
						<p class="paragraph">{event.description}</p>
				</div>
			))}
		</div>
		<slot></slot>
	</section>
</handle-appear>

<script>
	import gsap from 'gsap';
	import ScrollTrigger from 'gsap/ScrollTrigger';

	gsap.registerPlugin(ScrollTrigger);

	class Appear extends HTMLElement {
		constructor() {
			super();
		}

		connectedCallback() {
			const events = this.querySelectorAll('.event');


			events.forEach(event => {
				gsap.timeline({
					scrollTrigger: {
						trigger: event,
						start: 'top 80%',
						end: 'bottom 20%',
					},
				})
					.from(event.querySelector('.year'), {
						width: 0,
						ease: "steps(4)",
						duration: 0.6,
					})
					.to(event.querySelector('.year'), 
						{ borderColor: 'transparent', duration: .15, repeat: 2, ease: "none"}, 
						"0"
					)
					.from(event.querySelector('.paragraph'), {
						opacity: 0,
						y: '1rem',
						duration: 1,
					});
					
			});
		}
	}

	if (!customElements.get('handle-appear')) {
		customElements.define('handle-appear', Appear);
	}
</script>
